#cloud-config
ssh_pwauth: yes
password: AppDev2020!
chpasswd:
  expire: false

#package_update: true

apt:
  sources_list: | 
    deb mirror://mirrors.ubuntu.com/mirrors.txt bionic main restricted universe multiverse
    deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-backports main restricted universe multiverse
    deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-updates main restricted universe multiverse
    deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-security main restricted universe multiverse

packages:
 - apache2-utils
 - unzip
 - siege

write_files:
 - path: /etc/environment
   permissions: 0644
   content: | 
     KUBECONFIG="/etc/rancher/k3s/k3s.yaml"
   append: true

 - path: /etc/skel/.profile
   content: | 
     helm() {
       if [ -z ${ACCESS_TOKEN+x} ]; then echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOURTOKEN"; return; fi
       if [ -z ${REALM+x} ]; then echo "REALM is unset. Please export REALM=YOURREALM"; return; fi

       echo "Using ACCESS_TOKEN=$ACCESS_TOKEN"
       echo "Using REALM=$REALM"

       command helm "$@"
     }

     echo "Waiting for cloud-init status..."
     if ! /usr/bin/timeout 180 grep -q 'Cloud-init .*finished at' <(tail -f /var/log/cloud-init-output.log); then
       echo "Instance setup did not complete after 3 minutes. Please try again.";
     else
       echo "Your instance is ready!";
     fi

     if [ -e ~/.instance ]; then
       INSTANCE=$(cat ~/.instance)
     fi
     if [ -z ${INSTANCE+x} ]; then
       if curl -s -m 3 http://169.254.169.254/latest/dynamic/instance-identity/document | grep -q availabilityZone ; then
         # on AWS, grab instance id and use that
         AWSTOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
         INSTANCE=$(curl -qs -H "X-aws-ec2-metadata-token: $AWSTOKEN" http://169.254.169.254/latest/meta-data/instance-id)
       else
         # not AWS, use hostname set via multipass OR create own id here
         # INSTANCE=$(openssl rand -base64 16 | tr -dc 'A-Z' | head -c4)
         INSTANCE=$(hostname)
       fi
       echo $INSTANCE > ~/.instance
     fi
     export INSTANCE
   append: true

runcmd:
 # Install K3s
 - curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.17.5+k3s1 K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="server" sh -s -
 - chmod 644 /etc/rancher/k3s/k3s.yaml
 # Download Workshop
 - export WSVERSION=1.14
 - curl -s -OL https://github.com/signalfx/app-dev-workshop/archive/v$WSVERSION.zip
 - unzip -qq v$WSVERSION.zip -d /home/ubuntu/
 - mv /home/ubuntu/app-dev-workshop-$WSVERSION /home/ubuntu/workshop
 - 'sed -i -e ''s/\[HOSTNAME\]/''"$(hostname)"''/'' /home/ubuntu/workshop/k3s/values.yaml'
 # Download SignalFx Jumpstart
 - curl -s -L https://github.com/signalfx/signalfx-jumpstart/archive/master.zip -o jumpstart.zip
 - unzip -qq jumpstart.zip -d /home/ubuntu/
 - mv /home/ubuntu/signalfx-jumpstart-master /home/ubuntu/signalfx-jumpstart
 # Install Helm
 - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
 # Install K9s (Kubernetes UI)
 - curl -s -OL https://github.com/derailed/k9s/releases/download/v0.19.3/k9s_Linux_x86_64.tar.gz
 - tar xfz k9s_Linux_x86_64.tar.gz
 - mv k9s /usr/local/bin/
 # Configure motd
 - curl -s https://raw.githubusercontent.com/signalfx/app-dev-workshop/master/etc/motd -o /etc/motd
 - chmod -x /etc/update-motd.d/*
 # Install AWS CLI
 - curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
 - unzip -qq awscliv2.zip
 - ./aws/install
 # Install eksctl for AWS/EKS
 - curl -s --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz | tar xz -C /tmp
 - mv /tmp/eksctl /usr/local/bin/
 # Install Terraform
 - curl -s -OL https://releases.hashicorp.com/terraform/0.12.25/terraform_0.12.25_linux_amd64.zip
 - unzip -qq terraform_0.12.25_linux_amd64.zip
 - mv terraform /usr/local/bin/
 # Set correct permissions on ubuntu user home directory
 - chown -R ubuntu:ubuntu /home/ubuntu
